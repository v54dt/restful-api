/*
 * ECG Restful API
 *
 * TEXT 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: vincent71497867@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EcgData : IEquatable<EcgData>
    { 
        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [Required]
        [DataMember(Name="date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets DataPointAmount
        /// </summary>
        [Required]
        [DataMember(Name="data_point_amount")]
        public int? DataPointAmount { get; set; }

        /// <summary>
        /// Gets or Sets L1
        /// </summary>
        [Required]
        [DataMember(Name="L1")]
        public List<> L1 { get; set; }

        /// <summary>
        /// Gets or Sets L2
        /// </summary>
        [Required]
        [DataMember(Name="L2")]
        public List<> L2 { get; set; }

        /// <summary>
        /// Gets or Sets L3
        /// </summary>
        [Required]
        [DataMember(Name="L3")]
        public List<> L3 { get; set; }

        /// <summary>
        /// Gets or Sets L4
        /// </summary>
        [Required]
        [DataMember(Name="L4")]
        public List<> L4 { get; set; }

        /// <summary>
        /// Gets or Sets L5
        /// </summary>
        [Required]
        [DataMember(Name="L5")]
        public List<> L5 { get; set; }

        /// <summary>
        /// Gets or Sets L6
        /// </summary>
        [Required]
        [DataMember(Name="L6")]
        public List<> L6 { get; set; }

        /// <summary>
        /// Gets or Sets L7
        /// </summary>
        [Required]
        [DataMember(Name="L7")]
        public List<> L7 { get; set; }

        /// <summary>
        /// Gets or Sets L8
        /// </summary>
        [Required]
        [DataMember(Name="L8")]
        public List<> L8 { get; set; }

        /// <summary>
        /// Gets or Sets L9
        /// </summary>
        [Required]
        [DataMember(Name="L9")]
        public List<> L9 { get; set; }

        /// <summary>
        /// Gets or Sets L10
        /// </summary>
        [Required]
        [DataMember(Name="L10")]
        public List<> L10 { get; set; }

        /// <summary>
        /// Gets or Sets L11
        /// </summary>
        [Required]
        [DataMember(Name="L11")]
        public List<> L11 { get; set; }

        /// <summary>
        /// Gets or Sets L12
        /// </summary>
        [Required]
        [DataMember(Name="L12")]
        public List<> L12 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcgData {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DataPointAmount: ").Append(DataPointAmount).Append("\n");
            sb.Append("  L1: ").Append(L1).Append("\n");
            sb.Append("  L2: ").Append(L2).Append("\n");
            sb.Append("  L3: ").Append(L3).Append("\n");
            sb.Append("  L4: ").Append(L4).Append("\n");
            sb.Append("  L5: ").Append(L5).Append("\n");
            sb.Append("  L6: ").Append(L6).Append("\n");
            sb.Append("  L7: ").Append(L7).Append("\n");
            sb.Append("  L8: ").Append(L8).Append("\n");
            sb.Append("  L9: ").Append(L9).Append("\n");
            sb.Append("  L10: ").Append(L10).Append("\n");
            sb.Append("  L11: ").Append(L11).Append("\n");
            sb.Append("  L12: ").Append(L12).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EcgData)obj);
        }

        /// <summary>
        /// Returns true if EcgData instances are equal
        /// </summary>
        /// <param name="other">Instance of EcgData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcgData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    DataPointAmount == other.DataPointAmount ||
                    DataPointAmount != null &&
                    DataPointAmount.Equals(other.DataPointAmount)
                ) && 
                (
                    L1 == other.L1 ||
                    L1 != null &&
                    L1.SequenceEqual(other.L1)
                ) && 
                (
                    L2 == other.L2 ||
                    L2 != null &&
                    L2.SequenceEqual(other.L2)
                ) && 
                (
                    L3 == other.L3 ||
                    L3 != null &&
                    L3.SequenceEqual(other.L3)
                ) && 
                (
                    L4 == other.L4 ||
                    L4 != null &&
                    L4.SequenceEqual(other.L4)
                ) && 
                (
                    L5 == other.L5 ||
                    L5 != null &&
                    L5.SequenceEqual(other.L5)
                ) && 
                (
                    L6 == other.L6 ||
                    L6 != null &&
                    L6.SequenceEqual(other.L6)
                ) && 
                (
                    L7 == other.L7 ||
                    L7 != null &&
                    L7.SequenceEqual(other.L7)
                ) && 
                (
                    L8 == other.L8 ||
                    L8 != null &&
                    L8.SequenceEqual(other.L8)
                ) && 
                (
                    L9 == other.L9 ||
                    L9 != null &&
                    L9.SequenceEqual(other.L9)
                ) && 
                (
                    L10 == other.L10 ||
                    L10 != null &&
                    L10.SequenceEqual(other.L10)
                ) && 
                (
                    L11 == other.L11 ||
                    L11 != null &&
                    L11.SequenceEqual(other.L11)
                ) && 
                (
                    L12 == other.L12 ||
                    L12 != null &&
                    L12.SequenceEqual(other.L12)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (DataPointAmount != null)
                    hashCode = hashCode * 59 + DataPointAmount.GetHashCode();
                    if (L1 != null)
                    hashCode = hashCode * 59 + L1.GetHashCode();
                    if (L2 != null)
                    hashCode = hashCode * 59 + L2.GetHashCode();
                    if (L3 != null)
                    hashCode = hashCode * 59 + L3.GetHashCode();
                    if (L4 != null)
                    hashCode = hashCode * 59 + L4.GetHashCode();
                    if (L5 != null)
                    hashCode = hashCode * 59 + L5.GetHashCode();
                    if (L6 != null)
                    hashCode = hashCode * 59 + L6.GetHashCode();
                    if (L7 != null)
                    hashCode = hashCode * 59 + L7.GetHashCode();
                    if (L8 != null)
                    hashCode = hashCode * 59 + L8.GetHashCode();
                    if (L9 != null)
                    hashCode = hashCode * 59 + L9.GetHashCode();
                    if (L10 != null)
                    hashCode = hashCode * 59 + L10.GetHashCode();
                    if (L11 != null)
                    hashCode = hashCode * 59 + L11.GetHashCode();
                    if (L12 != null)
                    hashCode = hashCode * 59 + L12.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EcgData left, EcgData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EcgData left, EcgData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
